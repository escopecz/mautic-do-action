name: Integration Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-deployment:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Generate unique test name
        id: test-name
        run: |
          # Create unique name with GitHub run number
          TEST_NAME="mautic-test-${{ github.run_number }}"
          echo "test-name=$TEST_NAME" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Test VPS name: $TEST_NAME"
        
      - name: Deploy Mautic (Initial Installation)
        id: deploy
        uses: ./
        with:
          vps-name: ${{ steps.test-name.outputs.test-name }}
          vps-size: 's-1vcpu-1gb'
          vps-region: 'nyc1'
          email: 'test@mautic-test.local'
          mautic-password: ${{ secrets.TEST_MAUTIC_PASSWORD }}
          mysql-password: ${{ secrets.TEST_MYSQL_PASSWORD }}
          mysql-root-password: ${{ secrets.TEST_MYSQL_ROOT_PASSWORD }}
          digitalocean-token: ${{ secrets.DIGITALOCEAN_TOKEN }}
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Start with older version for upgrade testing
          mautic-version: '6.0.4-apache'
          
      - name: Show initial deployment results
        run: |
          echo "üéâ Initial deployment completed successfully!"
          echo "VPS IP: ${{ steps.deploy.outputs.vps-ip }}"
          echo "Mautic URL: ${{ steps.deploy.outputs.mautic-url }}"
          echo "‚úÖ Mautic 6.0.4 installation test passed"
          
      - name: Verify initial deployment is ready
        run: |
          echo "üîç Actively verifying Mautic 6.0.4 is fully ready..."
          echo "üêõ Debug: Checking deployment outputs..."
          echo "  VPS IP: '${{ steps.deploy.outputs.vps-ip }}'"
          echo "  Mautic URL: '${{ steps.deploy.outputs.mautic-url }}'"
          
          # Setup SSH for container verification
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          VPS_IP="${{ steps.deploy.outputs.vps-ip }}"
          MAUTIC_URL="${{ steps.deploy.outputs.mautic-url }}"
          
          # First verify all containers are running
          echo "üê≥ Verifying all Docker containers are running correctly..."
          CONTAINER_STATUS=$(ssh -o StrictHostKeyChecking=no jan@$VPS_IP "cd /var/www && docker compose ps --format 'table {{.Name}}\t{{.Status}}\t{{.Health}}'")
          echo "$CONTAINER_STATUS"
          
          # Check mautic_db
          if echo "$CONTAINER_STATUS" | grep -q "mautic_db.*Up.*healthy"; then
            echo "‚úÖ mautic_db container is running and healthy"
          else
            echo "‚ùå mautic_db container is not healthy"
            ssh -o StrictHostKeyChecking=no jan@$VPS_IP "docker logs mautic_db --tail 50"
            exit 1
          fi
          
          # Check mautic_web
          if echo "$CONTAINER_STATUS" | grep -q "mautic_web.*Up.*healthy"; then
            echo "‚úÖ mautic_web container is running and healthy"
          else
            echo "‚ùå mautic_web container is not healthy"
            ssh -o StrictHostKeyChecking=no jan@$VPS_IP "docker logs mautic_web --tail 50"
            exit 1
          fi
          
          # Check mautic_cron
          if echo "$CONTAINER_STATUS" | grep -q "mautic_cron.*Up"; then
            echo "‚úÖ mautic_cron container is running"
          else
            echo "‚ùå mautic_cron container is not running"
            ssh -o StrictHostKeyChecking=no jan@$VPS_IP "docker logs mautic_cron --tail 50"
            exit 1
          fi
          
          echo "üéâ All expected containers are running correctly!"
          
          # Validate URL before proceeding with accessibility tests
          if [ -z "$MAUTIC_URL" ]; then
            echo "‚ùå Error: MAUTIC_URL is empty!"
            echo "üîç Deploy step outputs:"
            echo "  - vps-ip: '${{ steps.deploy.outputs.vps-ip }}'"
            echo "  - mautic-url: '${{ steps.deploy.outputs.mautic-url }}'"
            echo "  - deployment-log: '${{ steps.deploy.outputs.deployment-log }}'"
            exit 1
          fi
          
          echo "‚úÖ MAUTIC_URL is set to: $MAUTIC_URL"
          
          # Wait up to 2 minutes for Mautic to be fully ready
          timeout=120
          counter=0
          
          while [ $counter -lt $timeout ]; do
            echo "‚è≥ Testing Mautic readiness... (${counter}/${timeout}s)"
            
            # Test login page accessibility - accept both 200 and 302 as success
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${MAUTIC_URL}/s/login" 2>/dev/null || echo "000")
            echo "üîç HTTP response code: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ]; then
              echo "‚úÖ Mautic is responding (HTTP $HTTP_CODE)"
              
              # For 302 redirects, this is normal for fresh Mautic installations
              if [ "$HTTP_CODE" = "302" ]; then
                echo "üìã HTTP 302 detected - Mautic is redirecting (normal for fresh installation)"
                echo "‚úÖ Mautic application is ready for setup!"
                break
              fi
              
              # For 200 responses, verify the page contains expected Mautic content
              if curl -s "${MAUTIC_URL}/s/login" | grep -q -i "mautic\|login"; then
                echo "‚úÖ Mautic application is fully ready!"
                break
              else
                echo "‚ö†Ô∏è Page accessible but content not ready yet..."
              fi
            else
              echo "‚ö†Ô∏è Mautic not yet accessible (HTTP $HTTP_CODE)..."
            fi
            
            sleep 5
            counter=$((counter + 5))
          done
          
          if [ $counter -ge $timeout ]; then
            echo "‚ùå Timeout waiting for Mautic to be ready"
            echo "üîç Final check - attempting to access ${MAUTIC_URL}/s/login"
            curl -v "${MAUTIC_URL}/s/login" || echo "Failed to access Mautic"
            exit 1
          fi
          
          echo "üéâ Initial deployment verification completed - ready for upgrade test!"
          
      - name: Setup SSH for manual upgrade test
        run: |
          echo "üîê Setting up SSH for manual upgrade testing..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Test version upgrade manually
        run: |
          echo "üîÑ Testing Mautic version upgrade from 6.0.4 to 6.0.5..."
          VPS_IP="${{ steps.deploy.outputs.vps-ip }}"
          
          if [ -z "$VPS_IP" ]; then
            echo "‚ùå Error: VPS_IP is empty!"
            exit 1
          fi
          
          echo "üìù Updating Mautic version configuration on VPS: $VPS_IP"
          
          # SSH into VPS and modify the version, then trigger upgrade
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@${VPS_IP} << 'EOF'
            cd /var/www
            echo "üîç Current deploy.env contents:"
            cat deploy.env
            echo ""
            echo "üîÑ Updating MAUTIC_VERSION to 6.0.5-apache..."
            sed -i 's/MAUTIC_VERSION=.*/MAUTIC_VERSION=6.0.5-apache/' deploy.env
            echo "‚úÖ Updated deploy.env contents:"
            cat deploy.env
            echo ""
            echo "üöÄ Re-running setup script to trigger upgrade detection..."
            ./setup 2>&1 | tee /var/log/upgrade-test.log
          EOF
          
          echo "‚úÖ Version upgrade test completed"
          
      - name: Verify upgrade worked
        run: |
          echo "üîç Verifying the upgrade was successful..."
          VPS_IP="${{ steps.deploy.outputs.vps-ip }}"
          MAUTIC_URL="${{ steps.deploy.outputs.mautic-url }}"
          
          # Download upgrade log
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@${VPS_IP}:/var/log/upgrade-test.log ./upgrade-test.log || echo "Could not download upgrade log"
          
          # Check if upgrade was detected
          if [ -f ./upgrade-test.log ]; then
            echo "üìã Checking upgrade log for update indicators..."
            
            if grep -q "Version mismatch:" ./upgrade-test.log; then
              echo "‚úÖ PASS: Version update was detected"
            else
              echo "‚ùå FAIL: Version update was not detected"
              echo "üìã Recent log entries:"
              tail -20 ./upgrade-test.log
              exit 1
            fi
            
            if grep -q "Containers recreated successfully" ./upgrade-test.log; then
              echo "‚úÖ PASS: Containers were updated successfully"
            else
              echo "‚ùå FAIL: Container update failed"
              echo "üìã Checking for alternative success indicators..."
              if grep -q "Mautic update completed successfully" ./upgrade-test.log; then
                echo "‚úÖ PASS: Mautic update completed successfully"
              else
                echo "‚ùå No success indicators found"
                exit 1
              fi
            fi
          fi
          
          # Verify Mautic is still working after upgrade
          echo "üîç Testing Mautic accessibility after upgrade..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${MAUTIC_URL}/s/login" 2>/dev/null || echo "000")
          echo "üìã HTTP response code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ]; then
            echo "‚úÖ PASS: Mautic is still accessible after upgrade (HTTP $HTTP_CODE)"
            
            # Check that it's actually the new version by inspecting container
            echo "üîç Verifying container is running new version..."
            CONTAINER_IMAGE=$(ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@${VPS_IP} "docker inspect mautic_web --format='{{.Config.Image}}' 2>/dev/null || echo 'unknown'")
            echo "üì¶ Container image: $CONTAINER_IMAGE"
            
            if echo "$CONTAINER_IMAGE" | grep -q "6.0.5-apache"; then
              echo "‚úÖ PASS: Container is running Mautic 6.0.5-apache"
            else
              echo "‚ùå FAIL: Container is not running expected version"
              exit 1
            fi
          else
            echo "‚ùå FAIL: Mautic is not accessible after upgrade"
            exit 1
          fi
          
          echo "üéâ All version upgrade validation checks passed!"
          echo "üèÅ Integration test completed successfully:"
          echo "   ‚úÖ Initial deployment with Mautic 6.0.4"
          echo "   ‚úÖ Version upgrade to 6.0.5 without reinstallation"
          echo "   ‚úÖ Proper maintenance and migration execution"
          echo "   ‚úÖ Container version verification"
          
      - name: Cleanup test droplet
        if: always()
        run: |
          echo "üßπ Cleaning up test droplet..."
          TEST_NAME="${{ steps.test-name.outputs.test-name }}"
          
          # Install doctl
          doctl auth init --access-token "${{ secrets.DIGITALOCEAN_TOKEN }}"
          
          # Delete the test droplet
          if doctl compute droplet list | grep -q "$TEST_NAME"; then
            echo "Deleting droplet: $TEST_NAME"
            doctl compute droplet delete "$TEST_NAME" --force
            echo "‚úÖ Test droplet deleted"
          else
            echo "‚ÑπÔ∏è Test droplet not found (may have failed to create)"
          fi
          
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs-${{ github.run_number }}
          path: |
            ./setup-dc.log
            ./deploy.env
          if-no-files-found: warn
          retention-days: 7